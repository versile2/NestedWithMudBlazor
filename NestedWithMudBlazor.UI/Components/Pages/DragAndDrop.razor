@page "/dnd"

<PageTitle>Drag and Drop</PageTitle>

<MudText Typo="Typo.h3">Drag and Drop</MudText>

<br />
<MudDropContainer T="Element" Items="Elements" ItemsSelector="@((item,dropzone) => item.Index.ToString() == dropzone)"
				  ItemDropped="ItemDropped" Class="d-flex flex-column flex-grow-1">
	<ChildContent>
		<MudSimpleTable>
			<colgroup>
				<col style="width: 75px;"/>
				<col style="width: 75px;"/>
				<col style="width: 175px;"/>
				<col style="width: 75px;"/>
				<col style="width: 75px;" />
			</colgroup>
			<thead>
			<tr>
				<th>Nr</th>
				<th>Sign</th>
				<th>Name</th>
				<th>Position</th>
				<th>Molar Mass</th>
			</tr>
			</thead>
			<tbody>
			@foreach (var row in Elements)
			{
				<MudPaper Class="ma-4 flex-grow-1">
					<MudList T="string" Class="d-flex flex-column mud-height-full">
							<MudDropZone T="Element" AllowReorder Identifier="@row.Index.ToString()" />
					</MudList>
				</MudPaper>
			}
			</tbody>
		</MudSimpleTable>
	</ChildContent>
	<ItemRenderer>
		<tr>
			<td>@context.Id</td>
			<td>@context.Sign</td>
			<td>@context.Name</td>
			<td>@context.Position</td>
			<td>@context.Molar - @context.Index</td>
		</tr>
	</ItemRenderer>
</MudDropContainer>


@code {

	private class Element
	{
		public int Id { get; set; }
		public int Index { get; set; }
		public string Sign { get; set; }
		public string Name { get; set; }
		public int Position { get; set; }
		public double Molar { get; set; }
	}

	private List<Element> Elements = new List<Element>()
	{
		new Element() { Id = 1, Index = 0, Sign = "H", Name = "Hydrogen", Position = 0, Molar = 1.00794 },
		new Element() { Id = 2, Index = 1, Sign = "He", Name = "Helium", Position = 17, Molar = 4.002602 },
		new Element() { Id = 3, Index = 2, Sign = "Li", Name = "Lithium", Position = 0, Molar = 6.941 }
	};

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			StateHasChanged();
		}
	}

	private void ItemDropped(MudItemDropInfo<Element> dropItem)
	{
		var newIndex = int.Parse(dropItem.DropzoneIdentifier);
		var oldIndex = dropItem.Item.Index;

		if (dropItem.IndexInZone > 0)
		{
			// inserting after the newIndex item
			newIndex++;
		}

		Elements.RemoveAt(oldIndex);
		Elements.Insert(newIndex, dropItem.Item);

		for (int i=0; i < Elements.Count; i++)
		{
			Elements[i].Index = i;
		}

		StateHasChanged();
	}
}