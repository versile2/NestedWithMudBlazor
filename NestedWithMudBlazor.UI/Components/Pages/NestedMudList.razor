@page "/nestedmudlist"
@inject INavigationRepository _navRepo

<PageTitle>Nested MudList</PageTitle>

<MudText Typo="Typo.h3">Nested MudList</MudText>
<MudPaper>
    <MudList T="Data_NavLink">
        @foreach (var nav in NavList!)
        {
            @RenderNavLink(nav)
        }
    </MudList>
</MudPaper>


@code{

    private List<Data_NavLink> NavList = [];

    protected async override Task OnInitializedAsync()
    {
        // Query the database to retrieve the hierarchical navigation data
        var navLinks = await _navRepo.GetNavigationMenuAsync();

        // Get the current user's authentication state
        //var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        //var user = authState?.User;

        // Filter the navigation links based on the user's roles
        NavList = navLinks
            .Where(x => x.IsActive == true)
            .Where(nav =>
            {
                if (!string.IsNullOrEmpty(nav.Role))
                {
                    string[] roles = nav.Role.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                                .Select(r => r.Trim())
                                                .ToArray();
                    bool authorized = false;
                    foreach (var role in roles)
                    {
                        if (true)  //  user!.IsInRole(role)
                        {
                            // If the user has at least 1 of the required roles, include the navigation link
                            authorized = true;
                        }
                    }
                    return authorized;
                }

                return true;
            })
            .Where(m => !m.ParentId.HasValue)
            .ToList();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    RenderFragment RenderNavLink(Data_NavLink nav)
    {
        return builder =>
        {
            builder.OpenComponent<MudListItem<Data_NavLink>>(1);
            builder.AddAttribute(2, "Text", nav.Title);
            builder.AddAttribute(3, "Icon", nav.Icon);

            if (nav.ChildNavLinks.Any())
            {
                builder.AddAttribute(4, "Expanded", true);
                builder.AddAttribute(5, "NestedList", (RenderFragment)(nestedBuilder =>
                {
                    foreach (var child in nav.ChildNavLinks)
                    {
                        nestedBuilder.AddContent(0, RenderNavLink(child));
                    }
                }));
            }
            else
            {
                builder.AddAttribute(4, "Href", nav.Href);
                builder.AddAttribute(5, "Target", nav.IsNewWindow ? "_blank" : null);
            }

            builder.CloseComponent();
        };
    }
}